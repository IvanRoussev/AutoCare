// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IvanRoussev/autocare/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/IvanRoussev/autocare/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockStore) CreateCar(arg0 context.Context, arg1 db.CreateCarParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockStoreMockRecorder) CreateCar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockStore)(nil).CreateCar), arg0, arg1)
}

// CreateMaintenance mocks base method.
func (m *MockStore) CreateMaintenance(arg0 context.Context, arg1 db.CreateMaintenanceParams) (db.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaintenance", arg0, arg1)
	ret0, _ := ret[0].(db.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMaintenance indicates an expected call of CreateMaintenance.
func (mr *MockStoreMockRecorder) CreateMaintenance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaintenance", reflect.TypeOf((*MockStore)(nil).CreateMaintenance), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCarByVIN mocks base method.
func (m *MockStore) DeleteCarByVIN(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarByVIN", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarByVIN indicates an expected call of DeleteCarByVIN.
func (mr *MockStoreMockRecorder) DeleteCarByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarByVIN", reflect.TypeOf((*MockStore)(nil).DeleteCarByVIN), arg0, arg1)
}

// DeleteMaintenanceByID mocks base method.
func (m *MockStore) DeleteMaintenanceByID(arg0 context.Context, arg1 sql.NullInt32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaintenanceByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaintenanceByID indicates an expected call of DeleteMaintenanceByID.
func (mr *MockStoreMockRecorder) DeleteMaintenanceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaintenanceByID", reflect.TypeOf((*MockStore)(nil).DeleteMaintenanceByID), arg0, arg1)
}

// DeleteMaintenanceByVIN mocks base method.
func (m *MockStore) DeleteMaintenanceByVIN(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaintenanceByVIN", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaintenanceByVIN indicates an expected call of DeleteMaintenanceByVIN.
func (mr *MockStoreMockRecorder) DeleteMaintenanceByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaintenanceByVIN", reflect.TypeOf((*MockStore)(nil).DeleteMaintenanceByVIN), arg0, arg1)
}

// DeleteUserByID mocks base method.
func (m *MockStore) DeleteUserByID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockStoreMockRecorder) DeleteUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockStore)(nil).DeleteUserByID), arg0, arg1)
}

// DeleteUserByUsername mocks base method.
func (m *MockStore) DeleteUserByUsername(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByUsername indicates an expected call of DeleteUserByUsername.
func (mr *MockStoreMockRecorder) DeleteUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByUsername", reflect.TypeOf((*MockStore)(nil).DeleteUserByUsername), arg0, arg1)
}

// GetCarByVIN mocks base method.
func (m *MockStore) GetCarByVIN(arg0 context.Context, arg1 string) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByVIN indicates an expected call of GetCarByVIN.
func (mr *MockStoreMockRecorder) GetCarByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByVIN", reflect.TypeOf((*MockStore)(nil).GetCarByVIN), arg0, arg1)
}

// GetListMaintenancesByVIN mocks base method.
func (m *MockStore) GetListMaintenancesByVIN(arg0 context.Context, arg1 db.GetListMaintenancesByVINParams) ([]db.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMaintenancesByVIN", arg0, arg1)
	ret0, _ := ret[0].([]db.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMaintenancesByVIN indicates an expected call of GetListMaintenancesByVIN.
func (mr *MockStoreMockRecorder) GetListMaintenancesByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMaintenancesByVIN", reflect.TypeOf((*MockStore)(nil).GetListMaintenancesByVIN), arg0, arg1)
}

// GetMaintenanceByID mocks base method.
func (m *MockStore) GetMaintenanceByID(arg0 context.Context, arg1 sql.NullInt32) (db.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceByID", arg0, arg1)
	ret0, _ := ret[0].(db.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceByID indicates an expected call of GetMaintenanceByID.
func (mr *MockStoreMockRecorder) GetMaintenanceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceByID", reflect.TypeOf((*MockStore)(nil).GetMaintenanceByID), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// ListCars mocks base method.
func (m *MockStore) ListCars(arg0 context.Context, arg1 db.ListCarsParams) ([]db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCars", arg0, arg1)
	ret0, _ := ret[0].([]db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCars indicates an expected call of ListCars.
func (mr *MockStoreMockRecorder) ListCars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCars", reflect.TypeOf((*MockStore)(nil).ListCars), arg0, arg1)
}

// ListCarsByUsername mocks base method.
func (m *MockStore) ListCarsByUsername(arg0 context.Context, arg1 db.ListCarsByUsernameParams) ([]db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCarsByUsername", arg0, arg1)
	ret0, _ := ret[0].([]db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCarsByUsername indicates an expected call of ListCarsByUsername.
func (mr *MockStoreMockRecorder) ListCarsByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCarsByUsername", reflect.TypeOf((*MockStore)(nil).ListCarsByUsername), arg0, arg1)
}

// ListMaintenances mocks base method.
func (m *MockStore) ListMaintenances(arg0 context.Context, arg1 db.ListMaintenancesParams) ([]db.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaintenances", arg0, arg1)
	ret0, _ := ret[0].([]db.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaintenances indicates an expected call of ListMaintenances.
func (mr *MockStoreMockRecorder) ListMaintenances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaintenances", reflect.TypeOf((*MockStore)(nil).ListMaintenances), arg0, arg1)
}

// UpdateCarMakeByVIN mocks base method.
func (m *MockStore) UpdateCarMakeByVIN(arg0 context.Context, arg1 db.UpdateCarMakeByVINParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarMakeByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarMakeByVIN indicates an expected call of UpdateCarMakeByVIN.
func (mr *MockStoreMockRecorder) UpdateCarMakeByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarMakeByVIN", reflect.TypeOf((*MockStore)(nil).UpdateCarMakeByVIN), arg0, arg1)
}

// UpdateCarModelByVIN mocks base method.
func (m *MockStore) UpdateCarModelByVIN(arg0 context.Context, arg1 db.UpdateCarModelByVINParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarModelByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarModelByVIN indicates an expected call of UpdateCarModelByVIN.
func (mr *MockStoreMockRecorder) UpdateCarModelByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarModelByVIN", reflect.TypeOf((*MockStore)(nil).UpdateCarModelByVIN), arg0, arg1)
}

// UpdateCarUsernameByVIN mocks base method.
func (m *MockStore) UpdateCarUsernameByVIN(arg0 context.Context, arg1 db.UpdateCarUsernameByVINParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarUsernameByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarUsernameByVIN indicates an expected call of UpdateCarUsernameByVIN.
func (mr *MockStoreMockRecorder) UpdateCarUsernameByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarUsernameByVIN", reflect.TypeOf((*MockStore)(nil).UpdateCarUsernameByVIN), arg0, arg1)
}

// UpdateCarYearByVIN mocks base method.
func (m *MockStore) UpdateCarYearByVIN(arg0 context.Context, arg1 db.UpdateCarYearByVINParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarYearByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarYearByVIN indicates an expected call of UpdateCarYearByVIN.
func (mr *MockStoreMockRecorder) UpdateCarYearByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarYearByVIN", reflect.TypeOf((*MockStore)(nil).UpdateCarYearByVIN), arg0, arg1)
}

// UpdateMaintenanceMileageByVIN mocks base method.
func (m *MockStore) UpdateMaintenanceMileageByVIN(arg0 context.Context, arg1 db.UpdateMaintenanceMileageByVINParams) (db.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaintenanceMileageByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaintenanceMileageByVIN indicates an expected call of UpdateMaintenanceMileageByVIN.
func (mr *MockStoreMockRecorder) UpdateMaintenanceMileageByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaintenanceMileageByVIN", reflect.TypeOf((*MockStore)(nil).UpdateMaintenanceMileageByVIN), arg0, arg1)
}

// UpdateMaintenanceTypeByVIN mocks base method.
func (m *MockStore) UpdateMaintenanceTypeByVIN(arg0 context.Context, arg1 db.UpdateMaintenanceTypeByVINParams) (db.Maintenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaintenanceTypeByVIN", arg0, arg1)
	ret0, _ := ret[0].(db.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaintenanceTypeByVIN indicates an expected call of UpdateMaintenanceTypeByVIN.
func (mr *MockStoreMockRecorder) UpdateMaintenanceTypeByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaintenanceTypeByVIN", reflect.TypeOf((*MockStore)(nil).UpdateMaintenanceTypeByVIN), arg0, arg1)
}

// UpdateUserCountryByID mocks base method.
func (m *MockStore) UpdateUserCountryByID(arg0 context.Context, arg1 db.UpdateUserCountryByIDParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCountryByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserCountryByID indicates an expected call of UpdateUserCountryByID.
func (mr *MockStoreMockRecorder) UpdateUserCountryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCountryByID", reflect.TypeOf((*MockStore)(nil).UpdateUserCountryByID), arg0, arg1)
}

// UpdateUserFullNameByID mocks base method.
func (m *MockStore) UpdateUserFullNameByID(arg0 context.Context, arg1 db.UpdateUserFullNameByIDParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFullNameByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserFullNameByID indicates an expected call of UpdateUserFullNameByID.
func (mr *MockStoreMockRecorder) UpdateUserFullNameByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFullNameByID", reflect.TypeOf((*MockStore)(nil).UpdateUserFullNameByID), arg0, arg1)
}

// UpdateUsernameByID mocks base method.
func (m *MockStore) UpdateUsernameByID(arg0 context.Context, arg1 db.UpdateUsernameByIDParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsernameByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsernameByID indicates an expected call of UpdateUsernameByID.
func (mr *MockStoreMockRecorder) UpdateUsernameByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsernameByID", reflect.TypeOf((*MockStore)(nil).UpdateUsernameByID), arg0, arg1)
}
