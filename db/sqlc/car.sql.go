// Code generated by sqlc. DO NOT EDIT.
// source: car.sql

package db

import (
	"context"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars (vin, username, make, model, year
) VALUES (
$1, $2, $3, $4, $5
) RETURNING vin, username, make, model, year
`

type CreateCarParams struct {
	Vin      string `json:"vin"`
	Username string `json:"username"`
	Make     string `json:"make"`
	Model    string `json:"model"`
	Year     int32  `json:"year"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, createCar,
		arg.Vin,
		arg.Username,
		arg.Make,
		arg.Model,
		arg.Year,
	)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.Username,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const deleteCarByVIN = `-- name: DeleteCarByVIN :exec
DELETE FROM cars WHERE vin = $1
`

func (q *Queries) DeleteCarByVIN(ctx context.Context, vin string) error {
	_, err := q.db.ExecContext(ctx, deleteCarByVIN, vin)
	return err
}

const getCarByVIN = `-- name: GetCarByVIN :one
SELECT vin, username, make, model, year FROM cars
WHERE vin = $1 LIMIT 1
`

func (q *Queries) GetCarByVIN(ctx context.Context, vin string) (Car, error) {
	row := q.db.QueryRowContext(ctx, getCarByVIN, vin)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.Username,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const listCarsByUsername = `-- name: ListCarsByUsername :many
SELECT vin, username, make, model, year FROM cars
WHERE username = $1
LIMIT $2
OFFSET $3
`

type ListCarsByUsernameParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListCarsByUsername(ctx context.Context, arg ListCarsByUsernameParams) ([]Car, error) {
	rows, err := q.db.QueryContext(ctx, listCarsByUsername, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Car{}
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.Vin,
			&i.Username,
			&i.Make,
			&i.Model,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCarMakeByVIN = `-- name: UpdateCarMakeByVIN :one
UPDATE cars
SET make = $2
WHERE vin = $1
RETURNING vin, username, make, model, year
`

type UpdateCarMakeByVINParams struct {
	Vin  string `json:"vin"`
	Make string `json:"make"`
}

func (q *Queries) UpdateCarMakeByVIN(ctx context.Context, arg UpdateCarMakeByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarMakeByVIN, arg.Vin, arg.Make)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.Username,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const updateCarModelByVIN = `-- name: UpdateCarModelByVIN :one
UPDATE cars
SET model = $2
WHERE vin = $1
RETURNING vin, username, make, model, year
`

type UpdateCarModelByVINParams struct {
	Vin   string `json:"vin"`
	Model string `json:"model"`
}

func (q *Queries) UpdateCarModelByVIN(ctx context.Context, arg UpdateCarModelByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarModelByVIN, arg.Vin, arg.Model)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.Username,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const updateCarUsernameByVIN = `-- name: UpdateCarUsernameByVIN :one
UPDATE cars
SET username = $2
WHERE vin = $1
RETURNING  vin, username, make, model, year
`

type UpdateCarUsernameByVINParams struct {
	Vin      string `json:"vin"`
	Username string `json:"username"`
}

func (q *Queries) UpdateCarUsernameByVIN(ctx context.Context, arg UpdateCarUsernameByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarUsernameByVIN, arg.Vin, arg.Username)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.Username,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const updateCarYearByVIN = `-- name: UpdateCarYearByVIN :one
UPDATE cars
SET year = $2
WHERE vin = $1
RETURNING vin, username, make, model, year
`

type UpdateCarYearByVINParams struct {
	Vin  string `json:"vin"`
	Year int32  `json:"year"`
}

func (q *Queries) UpdateCarYearByVIN(ctx context.Context, arg UpdateCarYearByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarYearByVIN, arg.Vin, arg.Year)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.Username,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}
