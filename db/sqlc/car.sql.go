// Code generated by sqlc. DO NOT EDIT.
// source: car.sql

package db

import (
	"context"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars (vin, owner_id, make, model, year
) VALUES (
$1, $2, $3, $4, $5
) RETURNING vin, owner_id, make, model, year
`

type CreateCarParams struct {
	Vin     string `json:"vin"`
	OwnerID int64  `json:"owner_id"`
	Make    string `json:"make"`
	Model   string `json:"model"`
	Year    int32  `json:"year"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, createCar,
		arg.Vin,
		arg.OwnerID,
		arg.Make,
		arg.Model,
		arg.Year,
	)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.OwnerID,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const deleteCarByVIN = `-- name: DeleteCarByVIN :exec
DELETE FROM cars WHERE vin = $1
`

func (q *Queries) DeleteCarByVIN(ctx context.Context, vin string) error {
	_, err := q.db.ExecContext(ctx, deleteCarByVIN, vin)
	return err
}

const getCarByVIN = `-- name: GetCarByVIN :one
SELECT vin, owner_id, make, model, year FROM cars
WHERE vin = $1 LIMIT 1
`

func (q *Queries) GetCarByVIN(ctx context.Context, vin string) (Car, error) {
	row := q.db.QueryRowContext(ctx, getCarByVIN, vin)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.OwnerID,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const listCars = `-- name: ListCars :many
SELECT vin, owner_id, make, model, year FROM cars
ORDER BY vin
LIMIT $1
OFFSET $2
`

type ListCarsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCars(ctx context.Context, arg ListCarsParams) ([]Car, error) {
	rows, err := q.db.QueryContext(ctx, listCars, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Car{}
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.Vin,
			&i.OwnerID,
			&i.Make,
			&i.Model,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCarMakeByVIN = `-- name: UpdateCarMakeByVIN :one
UPDATE cars
SET make = $2
WHERE vin = $1
RETURNING vin, owner_id, make, model, year
`

type UpdateCarMakeByVINParams struct {
	Vin  string `json:"vin"`
	Make string `json:"make"`
}

func (q *Queries) UpdateCarMakeByVIN(ctx context.Context, arg UpdateCarMakeByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarMakeByVIN, arg.Vin, arg.Make)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.OwnerID,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const updateCarModelByVIN = `-- name: UpdateCarModelByVIN :one
UPDATE cars
SET model = $2
WHERE vin = $1
RETURNING vin, owner_id, make, model, year
`

type UpdateCarModelByVINParams struct {
	Vin   string `json:"vin"`
	Model string `json:"model"`
}

func (q *Queries) UpdateCarModelByVIN(ctx context.Context, arg UpdateCarModelByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarModelByVIN, arg.Vin, arg.Model)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.OwnerID,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const updateCarOwnerIdByVIN = `-- name: UpdateCarOwnerIdByVIN :one
UPDATE cars
SET owner_id = $2
WHERE vin = $1
RETURNING  vin, owner_id, make, model, year
`

type UpdateCarOwnerIdByVINParams struct {
	Vin     string `json:"vin"`
	OwnerID int64  `json:"owner_id"`
}

func (q *Queries) UpdateCarOwnerIdByVIN(ctx context.Context, arg UpdateCarOwnerIdByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarOwnerIdByVIN, arg.Vin, arg.OwnerID)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.OwnerID,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const updateCarYearByVIN = `-- name: UpdateCarYearByVIN :one
UPDATE cars
SET year = $2
WHERE vin = $1
RETURNING vin, owner_id, make, model, year
`

type UpdateCarYearByVINParams struct {
	Vin  string `json:"vin"`
	Year int32  `json:"year"`
}

func (q *Queries) UpdateCarYearByVIN(ctx context.Context, arg UpdateCarYearByVINParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, updateCarYearByVIN, arg.Vin, arg.Year)
	var i Car
	err := row.Scan(
		&i.Vin,
		&i.OwnerID,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}
